package com.arctro.database;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class DatabaseConnection implements Connection{
	
	long lastQuery;
	boolean closed = true;
	
	Connection c;
	
	public DatabaseConnection(Connection c){
		lastQuery = Time.current();
		
		this.c = c;
	}

	public boolean isWrapperFor(Class<?> cla) throws SQLException {
		return c.getClass() == cla;
	}

	@SuppressWarnings("unchecked")
	
	public <T> T unwrap(Class<T> cla) throws SQLException {
		return (T) cla;
	}

	
	public void abort(Executor e) throws SQLException {
		c.abort(e);
	}

	
	public void clearWarnings() throws SQLException {
		c.clearWarnings();
	}

	
	public void close() throws SQLException {
		setClosed(true);
	}

	
	public void commit() throws SQLException {
		c.commit();
	}

	
	public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
		return c.createArrayOf(typeName, elements);
	}

	
	public Blob createBlob() throws SQLException {
		return c.createBlob();
	}

	
	public Clob createClob() throws SQLException {
		return c.createClob();
	}

	
	public NClob createNClob() throws SQLException {
		return c.createNClob();
	}

	
	public SQLXML createSQLXML() throws SQLException {
		return c.createSQLXML();
	}

	
	public Statement createStatement() throws SQLException {
		return c.createStatement();
	}

	
	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		return c.createStatement(resultSetType, resultSetConcurrency);
	}

	
	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return c.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
	}

	
	public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
		return c.createStruct(typeName, attributes);
	}

	
	public boolean getAutoCommit() throws SQLException {
		return c.getAutoCommit();
	}

	
	public String getCatalog() throws SQLException {
		return c.getCatalog();
	}

	
	public Properties getClientInfo() throws SQLException {
		return c.getClientInfo();
	}

	
	public String getClientInfo(String name) throws SQLException {
		return c.getClientInfo(name);
	}

	
	public int getHoldability() throws SQLException {
		return c.getHoldability();
	}

	
	public DatabaseMetaData getMetaData() throws SQLException {
		return c.getMetaData();
	}

	
	public int getNetworkTimeout() throws SQLException {
		return c.getNetworkTimeout();
	}

	
	public String getSchema() throws SQLException {
		return c.getSchema();
	}

	
	public int getTransactionIsolation() throws SQLException {
		return c.getTransactionIsolation();
	}

	
	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return c.getTypeMap();
	}

	
	public SQLWarning getWarnings() throws SQLException {
		return c.getWarnings();
	}

	
	public boolean isClosed() throws SQLException {
		return closed;
	}

	
	public boolean isReadOnly() throws SQLException {
		return c.isReadOnly();
	}

	
	public boolean isValid(int timeout) throws SQLException {
		return c.isValid(timeout);
	}

	
	public String nativeSQL(String sql) throws SQLException {
		lastQuery = Time.current();
		return c.nativeSQL(sql);
	}

	
	public CallableStatement prepareCall(String sql) throws SQLException {
		lastQuery = Time.current();
		return c.prepareCall(sql);
	}

	
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		lastQuery = Time.current();
		return c.prepareCall(sql, resultSetType, resultSetConcurrency);
	}

	
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		lastQuery = Time.current();
		return c.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
	}

	
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		lastQuery = Time.current();
		return c.prepareStatement(sql);
	}

	
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		lastQuery = Time.current();
		return c.prepareStatement(sql, autoGeneratedKeys);
	}

	
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		lastQuery = Time.current();
		return c.prepareStatement(sql, columnIndexes);
	}

	
	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		lastQuery = Time.current();
		return c.prepareStatement(sql, columnNames);
	}

	
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		lastQuery = Time.current();
		return c.prepareStatement(sql, resultSetType, resultSetConcurrency);
	}

	
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		lastQuery = Time.current();
		return c.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
	}

	
	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		c.releaseSavepoint(savepoint);
	}

	
	public void rollback() throws SQLException {
		c.rollback();
	}

	
	public void rollback(Savepoint savepoint) throws SQLException {
		c.rollback(savepoint);
	}

	
	public void setAutoCommit(boolean autoCommit) throws SQLException {
		c.setAutoCommit(autoCommit);
	}

	
	public void setCatalog(String catalog) throws SQLException {
		c.setCatalog(catalog);
	}

	
	public void setClientInfo(Properties properties) throws SQLClientInfoException {
		c.setClientInfo(properties);
	}

	
	public void setClientInfo(String name, String value) throws SQLClientInfoException {
		c.setClientInfo(name, value);
	}

	
	public void setHoldability(int holdability) throws SQLException {
		c.setHoldability(holdability);
	}

	
	public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
		c.setNetworkTimeout(executor, milliseconds);
	}

	
	public void setReadOnly(boolean readOnly) throws SQLException {
		c.setReadOnly(readOnly);
	}

	
	public Savepoint setSavepoint() throws SQLException {
		return c.setSavepoint();
	}

	
	public Savepoint setSavepoint(String name) throws SQLException {
		return c.setSavepoint(name);
	}

	
	public void setSchema(String schema) throws SQLException {
		c.setSchema(schema);
	}

	
	public void setTransactionIsolation(int level) throws SQLException {
		c.setTransactionIsolation(level);
	}

	
	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		c.setTypeMap(map);
	}

	public void setClosed(boolean closed){
		this.closed = closed;
	}
	
	public boolean getClosed(){
		return closed;
	}
	
	public long getLastQueryTime(){
		return lastQuery;
	}
	
	public long timeSinceLastQuery(){
		return Time.current() - lastQuery;
	}
	
	public Connection getBaseConnection(){
		return c;
	}
}
